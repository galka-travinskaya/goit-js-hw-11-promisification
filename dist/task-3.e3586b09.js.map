{"version":3,"sources":["js/task-3.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","Promise","resolve","reject","delay","setTimeout","id","logSuccess","time","console","log","logError","warn","amount","then","catch"],"mappings":";AAGA,IAAMA,EAA4B,SAACC,EAAKC,GAC/BC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAGhDK,EAAkB,SAACC,GAChB,OAAA,IAAIC,QAAQ,SAACC,EAASC,GACnBC,IAAAA,EAAQX,EAA0B,IAAK,KAC7CY,WAAW,WACUT,KAAKE,SAAW,GAGjCI,EAAQF,EAAYM,GAAIF,GAExBD,EAAOH,EAAYM,KAEpBF,MAGHG,EAAa,SAACD,EAAIE,GACxBC,QAAQC,IAAmBJ,eAAAA,OAAAA,EAAmBE,kBAAAA,OAAAA,EAA9C,QAIMG,EAAW,SAAAL,GACfG,QAAQG,KAAqCN,gCAAAA,OAAAA,EAA7C,+BAMFP,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ,GAETZ,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ,GAETZ,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,KAC/BC,KAAKP,GACLQ,MAAMJ,GAETZ,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ","file":"task-3.e3586b09.js","sourceRoot":"..\\src","sourcesContent":["// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции \r\n// onSuccess и onError, а принимала всего один параметр transaction и возвращала промис.\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n  return new Promise((resolve, reject) => {\r\n      const delay = randomIntegerFromInterval(200, 500);\r\n      setTimeout(() => {\r\n        const canProcess = Math.random() > 0.3;\r\n    \r\n        if (canProcess) {\r\n          resolve(transaction.id, delay);\r\n        } else {\r\n          reject(transaction.id);\r\n        }\r\n      }, delay);\r\n  });\r\n};\r\nconst logSuccess = (id, time) => {\r\nconsole.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"]}